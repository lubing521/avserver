/*
*2012.02.21 by Aaron 
*/


#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "interface.h"
#include "rtspd.h"
#include "ipnc.h"
#include "cmdpares.h"
#include "cmd_type.h"
#include "init_system.h"


void set_imageconfig(Command_e cmd, Img_cfg_t img_data)
{
	int ret;
	Img_cfg_t stImage_file;

	ret = read_cfg_file(IMAGE_ATTR_FILE, &stImage_file, sizeof(Img_cfg_t));
	if(ret!=READ_CFG_FILE_OK){
		return;
	}

	switch(cmd){
	case cmd_imgattr:
		if(stImage_file.brightness!=img_data.brightness){
			stImage_file.brightness = img_data.brightness;
			adjust_brightness(stImage_file.brightness);
		}
		if(stImage_file.contrast!=img_data.contrast){
			stImage_file.contrast = img_data.contrast;
			adjust_contrast(stImage_file.contrast);
		}
		if(stImage_file.hue!=img_data.hue){
			stImage_file.hue = img_data.hue;
			adjust_hue(stImage_file.hue);
		}
		if(stImage_file.saturation!=img_data.saturation){
			stImage_file.saturation = img_data.saturation;
//			adjust_saturation(stImage_file.saturation);
			set_Img_saturation(img_data.saturation);
		}
		if(stImage_file.scene!=img_data.scene){
			stImage_file.scene = img_data.scene;
			if(stImage_file.scene==3){
				stImage_file.wb[0] = img_data.wb[0];
				stImage_file.wb[1] = img_data.wb[1];
				stImage_file.wb[2] = img_data.wb[2];
				set_isp_rgb_gain(0, stImage_file.wb[0]);
				set_isp_rgb_gain(1, stImage_file.wb[1]);
				set_isp_rgb_gain(2, stImage_file.wb[2]);
			}else{
				adjust_awb_scene_mode(stImage_file.scene);
			}
		}
		if(stImage_file.flip!=img_data.flip){
			stImage_file.flip = img_data.flip;
			set_flip(stImage_file.flip);
		}
		if(stImage_file.mirror!=img_data.mirror){
			stImage_file.mirror = img_data.mirror;
			set_mirror(stImage_file.mirror);
		}
		stImage_file.imgctow[0] = img_data.imgctow[0];
		stImage_file.imgctow[1] = img_data.imgctow[1];
		
		set_imgCtoW(img_data.imgctow[0]);
		set_imgWtoC(img_data.imgctow[1]);

		break;
	default:
		break;
	}

	ret = write_cfg_file(IMAGE_ATTR_FILE, &stImage_file, sizeof(stImage_file));

	return;
}

void set_infraredconfig(Command_e cmd, Infrared_cfg_t infrared_data)
{
	int ret;
	Infrared_cfg_t stInfrared_file;

	ret = read_cfg_file(INFRARED_CFG_FILE, &stInfrared_file, sizeof(Infrared_cfg_t));
	if(ret!=READ_CFG_FILE_OK){
		return;
	}

	stInfrared_file.stat = infrared_data.stat;
	//process the infrared infomation.
	set_infradstatus(infrared_data.stat);

	ret = write_cfg_file(INFRARED_CFG_FILE, &stInfrared_file, sizeof(Infrared_cfg_t));

	return;
}

void set_netconfig(Command_e cmd, Net_cfg_t net_data)
{
	int ret;
	Net_cfg_t stNet_file;
	char str[128];

	ret = read_cfg_file(NET_CFG_FILE, &stNet_file, sizeof(Net_cfg_t));
	if(ret!=READ_CFG_FILE_OK){
		return;
	}

	strcpy((char *)&stNet_file, (char *)&net_data);

	sprintf(str, "netconf set"
				 "-ipaddr %s"
				 "-netmask %s"
				 "-gateway %s"
				 "-dhcp %s"
				 "-fdnsip %s"
				 "-sdnsip %s"
				 "-dnsstat %d"
				 "-hwaddr %s",
				 stNet_file.ip,
				 stNet_file.netmask,
				 stNet_file.gateway,
				 stNet_file.dhcpflag==0?"off":"on",
				 stNet_file.fdnsip,
				 stNet_file.sdnsip,
				 stNet_file.dnsstat,
				 stNet_file.macaddr
				 );
	system(str);

	return;
}

void set_portconfig(Command_e cmd, Port_cfg_t port_data)
{
	int ret;
	Port_cfg_t stPort_file;
	char str[32];

	ret = read_cfg_file(PORT_CFG_FILE, &stPort_file, sizeof(port_data));
	if(ret!=READ_CFG_FILE_OK){
		return;
	}
		
	system("killall -9 thttpd");

	sprintf(str, "thttpd -p %d -C thttpd.conf", stPort_file.httpport);
	system(str);

	//rtsp port暂时不能修改

	write_cfg_file(PORT_CFG_FILE, &stPort_file, sizeof(port_data));

	return;
}

void set_timerconfig(Command_e cmd, Time_cfg_t time_data)
{
	int ret;
	Time_cfg_t stTime_file;
	char str[32];

	ret = read_cfg_file(SYS_TIMER_FILE, &stTime_file, sizeof(Time_cfg_t));
	if(ret!=READ_CFG_FILE_OK){
		return;
	}

	sprintf(str, "date -s %s", stTime_file.sys_time);
	system(str);
	
	if(stTime_file.ntpenable){
		system("BR_ntp_client");
	}else{
		system("killall -9 BR_ntp_client");
	}

	return;
}

enum{
	e_ENC_0_FILE = 0,
	e_ENC_1_FILE,
	e_ENC_FW_FILE,
	e_IMAGE_ATTR_FILE,
	e_OVERLAY_CFG_FILE,
	e_INFRARED_CFG_FILE,
	e_NET_CFG_FILE,
	e_PORT_CFG_FILE,
	e_UPNP_CFG_FILE,
	e_WF_CFG_FILE,
	e_DDNS_CFG_FILE,
	e_PTZCOM_CFG_FILE,
	e_MD_CFG_FILE,
	e_USER_FILE,
	e_SNAPTIMER_CFG_FILE,
	e_FTP_CFG_FILE,
	e_SMTP_CFG_FILE,
	e_VIDMASK_CFG_FILE,
	e_SYS_CFG_FILE,
	e_SYS_TIMER_FILE
};

#define SET_FILE_CHANGED(flag, file_NO)	((flag)|(0x01<<(file_NO)))
#define CLR_FILE_CHANGED(flag, file_NO)	((flag)&(~(0x01<<(file_NO))))
#define IS_SET_FILE_CHANGED(flag, file_NO)	((flag)&(0x01<<(file_NO)))

int processMsg(void *buf, int len, void *rbuf)
{
	int cmd_type = -1;
	char *pKey;
	int iKey;
	int iValue;
	char *pValue;
	char *cmd_tmp;
	char *pInput = buf;
	int parseIndex = 0;
	int i = 0;

	char *pRet = rbuf;
	int ret = 0;
	int file_changed_flag = 0;
	void *p_tmp;

	int channel = -1;
	int sub_channel = 0;
	int witch_file = 0;
	int osd_region = -1;
	int index = -1;
	int index1 = -1;

	if(buf==NULL||rbuf==NULL){
		return -1;
	}
		
	fprintf(stdout, "enter processMsg.\n");
	fprintf(stdout, "recv is: %s.\n", buf);	

	cmd_tmp = (char *)malloc(128*sizeof(char));
	if(cmd_tmp==NULL){
		return -2;
	}
	fprintf(stdout, "start to parse.\n");
	do{
		pKey = ParseVars(pInput, &parseIndex);
		pValue = ParseVars(pInput, &parseIndex); 		
	
		iKey = atoi(pKey);
		if(iKey<e_TYPE||iKey>e_END){
			continue;
		}
		
		fprintf(stdout, "iKey is: %d.\n", iKey);

		switch(iKey){
		case e_TYPE:
			cmd_type = atoi(pValue);
			sprintf(cmd_tmp, "$%d=%d", e_TYPE, cmd_type);
			strcpy(pRet, cmd_tmp);
			break;
		case e_Chn:
			channel = atoi(pValue);
			sprintf(cmd_tmp, "&%d=%d", e_Chn, channel);
			strcat(pRet, cmd_tmp);
			break;
		case e_Sub_Chn:
			sub_channel = atoi(pValue);
			sprintf(cmd_tmp, "&%d=%d", e_Sub_Chn, sub_channel);
			strcat(pRet, cmd_tmp);
			break;
		case e_FW:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if((iValue!=50)&&(iValue!=60)){
					break;
				}

				if(g_iFw!=iValue){
					g_iFw = iValue;
					init_isp_pw_frequency(iValue);
					SET_FILE_CHANGED(file_changed_flag, e_ENC_FW_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_FW, g_iFw);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_denoise:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->denoise != iValue){
					((Av_cfg_t *)p_tmp)->denoise = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_denoise, ((Av_cfg_t *)p_tmp)->denoise);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_input_system:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->input_system != iValue){
					((Av_cfg_t *)p_tmp)->input_system = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_input_system, ((Av_cfg_t *)p_tmp)->input_system);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_de_interlace:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->de_interlace != iValue){
					((Av_cfg_t *)p_tmp)->de_interlace = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_de_interlace, ((Av_cfg_t *)p_tmp)->de_interlace);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_Stream_enable:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].stream_enable != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].stream_enable = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_Stream_enable, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].stream_enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_enc_type:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].enc_type != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].enc_type = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_enc_type, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].enc_type);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_frame_rate:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].frame_rate != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].frame_rate = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_frame_rate, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].frame_rate);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_bit_rate:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].bit_rate != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].bit_rate = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_bit_rate, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].bit_rate);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ip_interval:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].ip_interval != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].ip_interval = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ip_interval, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].ip_interval);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_width:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
/*
				iValue = atoi(pValue);

				((Av_cfg_t *)p_tmp)->ubs[sub_channel].width = iValue;
				//............
				SET_FILE_CHANGED(file_changed_flag, witch_file);
*/
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_width, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].width);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_height:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
/*
				iValue = atoi(pValue);

				((Av_cfg_t *)p_tmp)->ubs[sub_channel].height = iValue;
				//............
				SET_FILE_CHANGED(file_changed_flag, witch_file);
*/
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_height, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].height);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_rate_ctl_type:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].rate_ctl_type != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].rate_ctl_type = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_rate_ctl_type, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].rate_ctl_type);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_target_rate_max:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].target_rate_max != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].target_rate_max = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_target_rate_max, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].target_rate_max);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_reaction_delay_max:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].reaction_delay_max != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].reaction_delay_max = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_reaction_delay_max, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].reaction_delay_max);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_init_quant:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].init_quant != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].init_quant = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_init_quant, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].init_quant);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_max_quant:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].max_quant != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].max_quant = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_max_quant, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].max_quant);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_min_quant:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].min_quant != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].min_quant = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_min_quant, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].min_quant);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_mjpeg_quality:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].mjpeg_quality != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].mjpeg_quality = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_mjpeg_quality, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].mjpeg_quality);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_enable_roi:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].enabled_roi != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].enabled_roi = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_enable_roi, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].enabled_roi);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_roi_x:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_x != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_x = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_roi_x, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_x);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_roi_y:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_y != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_y = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_roi_y, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_y);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_roi_w:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_w != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_w = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_roi_w, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_w);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_roi_h:
			if(channel==MAIN_STREAM_CHN){
				p_tmp = (void *)&g_stAv_0_file;
				witch_file = e_ENC_0_FILE;
			}else{
				p_tmp = (void *)&g_stAv_1_file;
				witch_file = e_ENC_1_FILE;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_h != iValue){
					((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_h = iValue;
					//............
					SET_FILE_CHANGED(file_changed_flag, witch_file);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_roi_h, ((Av_cfg_t *)p_tmp)->ubs[sub_channel].roi_h);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_brightness:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.brightness!=iValue){
					g_stImg_file.brightness = iValue;
					adjust_brightness(g_stImg_file.brightness);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_brightness, g_stImg_file.brightness);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_saturation:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.saturation!=iValue){
					g_stImg_file.saturation = iValue;
					adjust_saturation(g_stImg_file.saturation);
					set_Img_saturation(g_stImg_file.saturation);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_saturation, g_stImg_file.saturation);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_contrast:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.contrast!=iValue){
					g_stImg_file.contrast = iValue;
					adjust_contrast(g_stImg_file.contrast);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_contrast, g_stImg_file.contrast);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_hue:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.hue!=iValue){
					g_stImg_file.hue = iValue;
					adjust_hue(g_stImg_file.hue);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_hue, g_stImg_file.hue);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_scene:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.scene!=iValue){
					g_stImg_file.scene = iValue;
					adjust_awb_scene_mode(g_stImg_file.scene);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_scene, g_stImg_file.scene);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_flip:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.flip!=iValue){
					g_stImg_file.flip = iValue;
					set_flip(g_stImg_file.flip);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_flip, g_stImg_file.flip);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_mirror:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.mirror!=iValue){
					g_stImg_file.mirror = iValue;
					set_mirror(g_stImg_file.mirror);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_mirror, g_stImg_file.mirror);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_imgctow:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.imgctow[0]!=iValue){
					g_stImg_file.imgctow[0] = iValue;
					set_imgCtoW(g_stImg_file.imgctow[0]);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_imgctow, g_stImg_file.imgctow[0]);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_imgwtoc:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.imgctow[1]!=iValue){
					g_stImg_file.imgctow[1] = iValue;
					set_imgWtoC(g_stImg_file.imgctow[1]);
					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_imgwtoc, g_stImg_file.imgctow[1]);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wb_r:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.wb[0]!=iValue){
					g_stImg_file.wb[0] = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wb_r, g_stImg_file.wb[0]);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wb_g:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.wb[1]!=iValue){
					g_stImg_file.wb[1] = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wb_g, g_stImg_file.wb[1]);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wb_b:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);

				if(g_stImg_file.wb[2]!=iValue){
					g_stImg_file.wb[2] = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_IMAGE_ATTR_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wb_b, g_stImg_file.wb[2]);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_osd_region:
			osd_region = atoi(pValue);
			sprintf(cmd_tmp, "&%d=%d", e_osd_region, osd_region);
			strcpy(pRet, cmd_tmp);
			break;
		case e_osd_region_name:
			if(osd_region<0||osd_region>=REGION_NUM){
				break;
			}
			if(cmd_type==T_Set){
				if(strcmp(g_arrstOsd_file[osd_region].name, pValue) != 0){
					strcpy(g_arrstOsd_file[osd_region].name, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_OVERLAY_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_osd_region_name, g_arrstOsd_file[osd_region].name);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_osd_enable:
			if(osd_region<0||osd_region>=REGION_NUM){
				break;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_arrstOsd_file[osd_region].enable != iValue){
					g_arrstOsd_file[osd_region].enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_OVERLAY_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_osd_enable, g_arrstOsd_file[osd_region].enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_osd_x:
			if(osd_region<0||osd_region>=REGION_NUM){
				break;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_arrstOsd_file[osd_region].x != iValue){
					g_arrstOsd_file[osd_region].x = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_OVERLAY_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_osd_x, g_arrstOsd_file[osd_region].x);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_osd_y:
			if(osd_region<0||osd_region>=REGION_NUM){
				break;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_arrstOsd_file[osd_region].y != iValue){
					g_arrstOsd_file[osd_region].y = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_OVERLAY_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_osd_y, g_arrstOsd_file[osd_region].y);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_osd_w:
			if(osd_region<0||osd_region>=REGION_NUM){
				break;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_arrstOsd_file[osd_region].w != iValue){
					g_arrstOsd_file[osd_region].w = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_OVERLAY_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_osd_w, g_arrstOsd_file[osd_region].w);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_osd_h:
			if(osd_region<0||osd_region>=REGION_NUM){
				break;
			}
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_arrstOsd_file[osd_region].h != iValue){
					g_arrstOsd_file[osd_region].h = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_OVERLAY_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_osd_h, g_arrstOsd_file[osd_region].h);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_infrad_stat:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stInfrad_file.stat != iValue){
					g_stInfrad_file.stat = iValue;
					set_infradstatus(g_stInfrad_file.stat);
					SET_FILE_CHANGED(file_changed_flag, e_INFRARED_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_infrad_stat, g_stInfrad_file.stat);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_dhcpflag:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stNet_file.dhcpflag != iValue){
					g_stNet_file.dhcpflag = iValue;
					
					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_net_dhcpflag, g_stInfrad_file.stat);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_ip:
			if(cmd_type==T_Set){
				if(strcmp(g_stNet_file.ip, pValue)!=0){
					strcpy(g_stNet_file.ip, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_net_ip, g_stNet_file.ip);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_netmask:
			if(cmd_type==T_Set){
				if(strcmp(g_stNet_file.netmask, pValue)!=0){
					strcpy(g_stNet_file.netmask, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_net_netmask, g_stNet_file.netmask);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_gateway:
			if(cmd_type==T_Set){
				if(strcmp(g_stNet_file.gateway, pValue)!=0){
					strcpy(g_stNet_file.gateway, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_net_gateway, g_stNet_file.gateway);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_dnsstat:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stNet_file.dnsstat!=iValue){
					g_stNet_file.dnsstat = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_net_dnsstat, g_stNet_file.dnsstat);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_fdnsip:
			if(cmd_type==T_Set){
				if(strcmp(g_stNet_file.fdnsip, pValue)!=0){
					strcpy(g_stNet_file.fdnsip, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_net_fdnsip, g_stNet_file.fdnsip);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_sdnsip:
			if(cmd_type==T_Set){
				if(strcmp(g_stNet_file.sdnsip, pValue)!=0){
					strcpy(g_stNet_file.sdnsip, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_net_sdnsip, g_stNet_file.sdnsip);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_macaddr:
			if(cmd_type==T_Set){
				sprintf(cmd_tmp, "%02x-%02x-%02x-%02x-%02x-%02x",
								g_stNet_file.macaddr[0], g_stNet_file.macaddr[1], g_stNet_file.macaddr[2],
								g_stNet_file.macaddr[3], g_stNet_file.macaddr[4], g_stNet_file.macaddr[5]);
				if(strcmp(cmd_tmp, pValue)!=0){
					sscanf(pValue, "%02x-%02x-%02x-%02x-%02x-%02x",
								&g_stNet_file.macaddr[0], &g_stNet_file.macaddr[1], &g_stNet_file.macaddr[2],
								&g_stNet_file.macaddr[3], &g_stNet_file.macaddr[4], &g_stNet_file.macaddr[5]);

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%02x-%02x-%02x-%02x-%02x-%02x", e_net_macaddr,
							g_stNet_file.macaddr[0], g_stNet_file.macaddr[1], g_stNet_file.macaddr[2],
							g_stNet_file.macaddr[3], g_stNet_file.macaddr[4], g_stNet_file.macaddr[5]);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_net_nettype:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stNet_file.nettype!=iValue){
					g_stNet_file.nettype = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_NET_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_net_nettype, g_stNet_file.dnsstat);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_port_httpport:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPort_file.httpport!=iValue){
					g_stPort_file.httpport = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PORT_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_port_httpport, g_stPort_file.httpport);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_port_rtspport:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPort_file.rtspport!=iValue){
					g_stPort_file.rtspport = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PORT_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_port_rtspport, g_stPort_file.rtspport);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_upnp_upmenable:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stUpnp_file.upm_enable!=iValue){
					g_stUpnp_file.upm_enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_UPNP_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_upnp_upmenable, g_stUpnp_file.upm_enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ddns_d3thenable:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stDDNS_file.d3th_enable!=iValue){
					g_stDDNS_file.d3th_enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_DDNS_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ddns_d3thenable, g_stDDNS_file.d3th_enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ddns_d3thservice:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stDDNS_file.d3th_service!=iValue){
					g_stDDNS_file.d3th_service = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_DDNS_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ddns_d3thservice, g_stDDNS_file.d3th_service);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ddns_d3thuname:
			if(cmd_type==T_Set){
				if(strcmp(g_stDDNS_file.d3th_uname, pValue)!=0){
					strcpy(g_stDDNS_file.d3th_uname, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_DDNS_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_ddns_d3thuname, g_stDDNS_file.d3th_uname);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ddns_d3thpasswd:
			if(cmd_type==T_Set){
				if(strcmp(g_stDDNS_file.d3th_passwd, pValue)!=0){
					strcpy(g_stDDNS_file.d3th_passwd, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_DDNS_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_ddns_d3thpasswd, g_stDDNS_file.d3th_passwd);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ddns_domain:
			if(cmd_type==T_Set){
				if(strcmp(g_stDDNS_file.d3th_domain, pValue)!=0){
					strcpy(g_stDDNS_file.d3th_domain, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_DDNS_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_ddns_domain, g_stDDNS_file.d3th_domain);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wf_enable:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stwfcfg_file.wf_enable !=iValue){
					g_stwfcfg_file.wf_enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_WF_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wf_enable, g_stwfcfg_file.wf_enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wf_ssid:
			if(cmd_type==T_Set){
				if(strcmp(g_stwfcfg_file.wf_ssid, pValue)!=0){
					strcpy(g_stwfcfg_file.wf_ssid, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_WF_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_wf_ssid, g_stwfcfg_file.wf_ssid);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wf_auth:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stwfcfg_file.wf_auth !=iValue){
					g_stwfcfg_file.wf_auth = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_WF_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wf_auth, g_stwfcfg_file.wf_auth);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wf_key:
			if(cmd_type==T_Set){
				if(strcmp(g_stwfcfg_file.wf_key, pValue)!=0){
					strcpy(g_stwfcfg_file.wf_key, pValue);

					SET_FILE_CHANGED(file_changed_flag, e_WF_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_wf_key, g_stwfcfg_file.wf_key);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wf_enc:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stwfcfg_file.wf_enc !=iValue){
					g_stwfcfg_file.wf_enc = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_WF_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wf_enc, g_stwfcfg_file.wf_enc);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wf_mode:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stwfcfg_file.wf_mode !=iValue){
					g_stwfcfg_file.wf_mode = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_WF_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wf_mode, g_stwfcfg_file.wf_mode);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_accesspoints:
			if(cmd_type==T_Get){
				iValue = atoi(pValue);
				if(iValue>=g_stWf_search_file.waccess_points)	break;
				index = iValue;
				sprintf(cmd_tmp, "&%d=%d", e_wfsearch_accesspoints, index);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_channel:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wfsearch_channel, g_stWf_search_file.search_Param[index].wchannel);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_rssi:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wfsearch_rssi, g_stWf_search_file.search_Param[index].wrssi);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_essid:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%s", e_wfsearch_essid, g_stWf_search_file.search_Param[index].wessid);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_enc:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wfsearch_enc, g_stWf_search_file.search_Param[index].wenc);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_auth:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wfsearch_auth, g_stWf_search_file.search_Param[index].wauth);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_wfsearch_net:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_wfsearch_net, g_stWf_search_file.search_Param[index].wnet);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ptz_protocal:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPtzcfg_file.protocal !=iValue){
					g_stPtzcfg_file.protocal = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PTZCOM_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ptz_protocal, g_stPtzcfg_file.protocal);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ptz_address:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPtzcfg_file.address !=iValue){
					g_stPtzcfg_file.address = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PTZCOM_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ptz_address, g_stPtzcfg_file.address);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ptz_baud:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPtzcfg_file.baud !=iValue){
					g_stPtzcfg_file.baud = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PTZCOM_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ptz_baud, g_stPtzcfg_file.baud);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ptz_databit:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPtzcfg_file.databit !=iValue){
					g_stPtzcfg_file.databit = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PTZCOM_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ptz_databit, g_stPtzcfg_file.databit);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ptz_stopbit:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPtzcfg_file.stopbit !=iValue){
					g_stPtzcfg_file.stopbit = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PTZCOM_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ptz_stopbit, g_stPtzcfg_file.stopbit);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_ptz_check:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stPtzcfg_file.check !=iValue){
					g_stPtzcfg_file.check = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_PTZCOM_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_ptz_check, g_stPtzcfg_file.check);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_io_alarm_enable:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.io_alarm_enable !=iValue){
					g_stMdcfg_file.io_alarm_enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_io_alarm_enable, g_stMdcfg_file.io_alarm_enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_io_alarm_flag:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.io_alarm_flag !=iValue){
					g_stMdcfg_file.io_alarm_flag = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_io_alarm_flag, g_stMdcfg_file.io_alarm_flag);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_email_switch:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.email_switch !=iValue){
					g_stMdcfg_file.email_switch = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_email_switch, g_stMdcfg_file.email_switch);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_snap_switch:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.snap_switch !=iValue){
					g_stMdcfg_file.snap_switch = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_snap_switch, g_stMdcfg_file.snap_switch);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_record_switch:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.record_switch !=iValue){
					g_stMdcfg_file.record_switch = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_record_switch, g_stMdcfg_file.record_switch);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_ftp_switch:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.ftp_switch !=iValue){
					g_stMdcfg_file.ftp_switch = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_ftp_switch, g_stMdcfg_file.ftp_switch);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_relay_switch:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.relay_switch !=iValue){
					g_stMdcfg_file.relay_switch = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_relay_switch, g_stMdcfg_file.relay_switch);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_relay_time:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.relay_time !=iValue){
					g_stMdcfg_file.relay_time = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_relay_time, g_stMdcfg_file.relay_time);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_type:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.type!=iValue){
					g_stMdcfg_file.schedule.type = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_type, g_stMdcfg_file.schedule.type);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_ename:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.ename!=iValue){
					g_stMdcfg_file.schedule.ename = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_ename, g_stMdcfg_file.schedule.ename);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_etm:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.etm!=iValue){
					g_stMdcfg_file.schedule.etm = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_etm, g_stMdcfg_file.schedule.etm);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_workday_Tend:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.stWorkday.t_end!=iValue){
					g_stMdcfg_file.schedule.stWorkday.t_end = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_workday_Tend, g_stMdcfg_file.schedule.stWorkday.t_end);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_workday_Tstart:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.stWorkday.t_start!=iValue){
					g_stMdcfg_file.schedule.stWorkday.t_start = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_workday_Tstart, g_stMdcfg_file.schedule.stWorkday.t_start);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_workend_Tstart:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.stWeekend.t_start!=iValue){
					g_stMdcfg_file.schedule.stWeekend.t_start = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_workend_Tstart, g_stMdcfg_file.schedule.stWeekend.t_start);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_workend_Tend:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.stWeekend.t_end!=iValue){
					g_stMdcfg_file.schedule.stWeekend.t_end = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_workend_Tend, g_stMdcfg_file.schedule.stWeekend.t_end);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case  e_md_schedule_week_Tstart:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.astWeek[0].t_start!=iValue){
					g_stMdcfg_file.schedule.astWeek[0].t_start = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_week_Tstart, g_stMdcfg_file.schedule.astWeek[0].t_start);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_schedule_week_Tend:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.schedule.astWeek[0].t_end!=iValue){
					g_stMdcfg_file.schedule.astWeek[0].t_end = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_schedule_week_Tend, g_stMdcfg_file.schedule.astWeek[0].t_end);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area:
			iValue = atoi(pValue);
			index = iValue;
			if(index>=4)	break;
			sprintf(cmd_tmp, "&%d=%d", e_md_area, index);
			strcat(pRet, cmd_tmp);
			ret++;
			break;
		case e_md_area_eable:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].enable!=iValue){
					g_stMdcfg_file.area_param[index].enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_eable, g_stMdcfg_file.area_param[index].enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area_s:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].s!=iValue){
					g_stMdcfg_file.area_param[index].s = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_eable, g_stMdcfg_file.area_param[index].s);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area_method:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].method!=iValue){
					g_stMdcfg_file.area_param[index].method = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_method, g_stMdcfg_file.area_param[index].method);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area_x:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].x!=iValue){
					g_stMdcfg_file.area_param[index].x = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_x, g_stMdcfg_file.area_param[index].x);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area_y:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].y!=iValue){
					g_stMdcfg_file.area_param[index].y = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_y, g_stMdcfg_file.area_param[index].y);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area_w:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].w!=iValue){
					g_stMdcfg_file.area_param[index].w = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_y, g_stMdcfg_file.area_param[index].w);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_md_area_h:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stMdcfg_file.area_param[index].h!=iValue){
					g_stMdcfg_file.area_param[index].h = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_MD_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_md_area_y, g_stMdcfg_file.area_param[index].h);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_snapT_enable:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stSnaptimercfg_file.as_enable!=iValue){
					g_stSnaptimercfg_file.as_enable = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_SNAPTIMER_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_snapT_enable, g_stSnaptimercfg_file.as_enable);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_snapT_interval:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stSnaptimercfg_file.as_interval!=iValue){
					g_stSnaptimercfg_file.as_interval = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_SNAPTIMER_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_snapT_interval, g_stSnaptimercfg_file.as_interval);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_snapT_type:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(g_stSnaptimercfg_file.as_type!=iValue){
					g_stSnaptimercfg_file.as_type = iValue;

					SET_FILE_CHANGED(file_changed_flag, e_SNAPTIMER_CFG_FILE);
				}
			}else if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_snapT_type, g_stSnaptimercfg_file.as_type);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_user_number:
			if(cmd_type==T_Get){
				sprintf(cmd_tmp, "&%d=%d", e_user_number, g_stUsr_file.user_num);
				strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		case e_user_opt_type:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				if(iValue<0||iValue>MODIFY_USER)	break;
				index = iValue;
			}
			break;
		case e_user_name:
			if(cmd_type==T_Set){
				switch(index){
				case ADD_USER:
					for(i=0; i<USER_MAX; i++){
						if(g_stUsr_file.stUser[i].username[0]=='\0')
							break;
					}
					if(i==USER_MAX)	break;
					strcpy(g_stUsr_file.stUser[i].username, pValue);
					break;
				case DEL_USER:
					for(i=0; i<USER_MAX; i++){
						if(strcmp(g_stUsr_file.stUser[i].username, pValue)==0){
							g_stUsr_file.stUser[i].username[0] = '\0';
							break;
						}
					}
					break;
				case MODIFY_USER:
					for(i=0; i<USER_MAX; i++){
						if(strcmp(g_stUsr_file.stUser[i].username, pValue)==0)
							break;
					}
					break;
				}
			}else if(cmd_type==T_Get){
				for(i=0; i<USER_MAX; i++){
					if(strcmp(g_stUsr_file.stUser[i].username, pValue)==0)
						break;
				}
			}
			index1 = i;
			sprintf(cmd_tmp, "&%d=%s", e_user_name, g_stUsr_file.stUser[index1].username);
			strcat(pRet, cmd_tmp);
			ret++;
			break;
		case e_user_password:

			break;
		case e_user_group:
			break;
		case e_ft_serverip:
			break;
		case e_ft_port:
			break;
		case e_ft_username:
			break;
		case e_ft_password:
			break;
		case e_ft_mode:
			break;
		case e_ft_dirname:
			break;
		case e_smtp_serverip:
			break;
		case e_smtp_port:
			break;
		case e_smtp_sslflag:
			break;
		case e_smtp_logintype:
			break;
		case e_smtp_username:
			break;
		case e_smtp_password:
			break;
		case e_smtp_from:
			break;
		case e_smtp_to:
			break;
		case e_smtp_subject:
			break;
		case e_smtp_text:
			break;
		case e_vdmask_number:
			break;
		case e_vdmask_NO:
			break;
		case e_vdmask_enable:
			break;
		case e_vdmask_x:
			break;
		case e_vdmask_y:
			break;
		case e_vdmask_w:
			break;
		case e_vdmask_h:
			break;
		case e_vdmask_color:
			break;
		case e_time_Zone:
			break;
		case e_time_dstmode:
			break;
		case e_time_ntpenable:
			break;
		case e_time_ntpserver:
			break;
		case e_time_ntpinterval:
			break;
		case e_time_systime:
			break;
		case e_sys_devtype:
			break;
		case e_sys_model:
			break;
		case e_sys_hdversion:
			break;
		case e_sys_swversion:
			break;
		case e_sys_devname:
			break;
		case e_sys_startdate:
			break;
		case e_sys_runtimes:
			break;
		case e_sys_sdstatus:
			break;
		case e_sys_sdfreespace:
			break;
		case e_sys_sdtotalspace:
			break;
		case e_nvr_opt:
			if(cmd_type==T_Set){
				iValue = atoi(pValue);
				set_nvr_send_status(channel, sub_channel, iValue);
			}
			break;
		case e_nvr_forIDR:
			if(cmd_type==T_Set){
				set_IDR_BR(channel, sub_channel);
			}
			break;
		case e_nvr_clientID:
			if(cmd_type==T_Get){
				iValue = atoi(pValue);
				sprintf(cmd_tmp, "&%d=%d", e_nvr_clientID, iValue);
					strcat(pRet, cmd_tmp);
				ret++;
			}
			break;
		default:
			break;
		}

	}while(parseIndex!=-1);

	strcat(pRet, "#");

/*
	Pack_Msg *stMsg = (Pack_Msg *)buf;
	update_avbs_t *pubs;
	int ch_num, sub_num;

	switch(stMsg->head.emData_type){
	case av_cfg_data:
		switch(stMsg->head.eCmd){
		case cmd_av:
			init_isp_pw_frequency(stMsg->Pack_data.av_data.iFW);
			break;
		case cmd_enc:
			ch_num = stMsg->Pack_data.av_data.chn;
			pubs = &(stMsg->Pack_data.av_data.ubs);
			for(sub_num=0; sub_num<DVR_ENC_REPD_BT_NUM; sub_num++){
				update_enc_param(pubs, ch_num, sub_num);
			}
			write_enc_cfg_file(ch_num);
			break;
		default:
			break;
		}
		break;
	case img_cfg_data:
		set_imageconfig(stMsg->head.eCmd, stMsg->Pack_data.img_data);
		break;
	case osd_cfg_data:
		printf("avserver[109]: unknown osd cmd.\n");
		break;
	case infrared_cfg_data:
		set_infraredconfig(stMsg->head.eCmd, stMsg->Pack_data.infrared_data);
		break;
	case net_cfg_data:
		set_netconfig(stMsg->head.eCmd, stMsg->Pack_data.net_data);
		break;
	case port_cfg_data:
		set_portconfig(stMsg->head.eCmd, stMsg->Pack_data.port_data);
		break;
	case DDNS_cfg_data:

		break;
	case wf_cfg_data:

		break;
	case ptz_cfg_data:

		break;
	case ptz_ctrl_data:

		break;
	case md_cfg_data:

		break;
	case snaptimer_cfg_data:

		break;
	case user_cfg_data:

		break;
	case ft_cfg_data:

		break;
	case smtp_cfg_data:

		break;
	case sys_cfg_data:
		printf("unknown args.\n");
		break;
	case timer_cfg_data:
		set_timerconfig(stMsg->head.eCmd, stMsg->Pack_data.time_data);
		break;
	case log_cfg_data:

		break;
	default:
		break;
	}
*/
	return ret;
}




